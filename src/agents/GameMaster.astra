package agents;

agent GameMaster {
	module Cartago cartago;
	module Console console;
	module System system;
	
	types actions {
		formula playerAgentId(string);
		formula numberOfRounds(int);
		formula numberOfAgents(int);
	}
	
	rule +!main(list args) {
		cartago.startService();
		cartago.link();
		
		!setupTournamentArtifact(cartago.ArtifactId tournamentArtifact);
		!connectToTournamentArtifact();
		
		!setupStrategyArtifact(cartago.ArtifactId strategyArtifact);
		!connectToStrategyArtifact();
		
		!setupScoreBoardArtifact(cartago.ArtifactId scoreBoardArtifact);
		!connectToScoreBoardArtifact();
		
		cartago.configureTournament("configuration/config.json");
		cartago.populateStrategiesMap("configuration/config.json");
		cartago.createAgents();
		
		cartago.getNumberOfAgents();
		cartago.getNumberOfRounds();
		
		query(numberOfRounds(int _numberOfRounds));
		query(numberOfAgents(int _numberOfAgents));
		
		cartago.createNewRoundScoreRecorder(_numberOfAgents, _numberOfRounds);
		cartago.newRound();
	}
	
	rule +!setupTournamentArtifact(cartago.ArtifactId tournamentArtifact) {
		cartago.makeArtifact("tournament", "tournament.core.TournamentArtifact", cartago.params([]), tournamentArtifact);
		console.println("Tournament artifact created");
    }
    
    rule +!connectToTournamentArtifact() {
		cartago.lookupArtifact("tournament", cartago.ArtifactId id);
		cartago.focus(id);
	}
    
    rule +!setupStrategyArtifact(cartago.ArtifactId strategiesArtifact) {
		cartago.makeArtifact("strategy", "strategies.core.StrategiesArtifact", cartago.params([]), strategiesArtifact);
		console.println("Strategy artifact created");
    }
    
    rule +!connectToStrategyArtifact() {
		cartago.lookupArtifact("strategy", cartago.ArtifactId id);
		cartago.focus(id);
	}
    
    rule +!setupScoreBoardArtifact(cartago.ArtifactId scoreBoardArtifact) {
		cartago.makeArtifact("score_board", "games.score.ScoreBoardArtifact", cartago.params([]), scoreBoardArtifact);
		console.println("Scoreboard artifact created");
    }
    
    rule +!connectToScoreBoardArtifact() {
		cartago.lookupArtifact("score_board", cartago.ArtifactId id);
		cartago.focus(id);
	}
    
    rule $cartago.signal(string id, createAgent(string agentId)) {
		system.createAgent(agentId, "agents.Player");
		system.setMainGoal(agentId, []);
		console.println("created agent: " + agentId);
	}
	
    rule $cartago.signal(string id, storeNumberOfAgents(int _numberOfAgents)) {
		+numberOfAgents(_numberOfAgents);
	}
	
	rule $cartago.signal(string id, storeNumberOfRounds(int _numberOfRounds)) {
		+numberOfRounds(_numberOfRounds);
	}
	
//	rule $cartago.signal(string id, requestNewRound()) {
//		cartago.newRound();
//	}
	
    rule $cartago.signal(string id, startNewRound()) {
//    	console.println("New round started with " + numberOfAgents + " agents.");
		query(numberOfAgents(int _numberOfAgents));
		int i = 0;
		
		while (i < _numberOfAgents) {
			string idString = i + "";
			send(request, idString, playerAgentId(idString));
			i = i + 1;
        }        
	}
	
	rule @message(request, string id, playerAgentId(string agentId)) {	
//		console.println("Agent with id " + agentId + " has received the request for a new round.");
		query(numberOfRounds(int _numberOfRounds));
		query(numberOfAgents(int _numberOfAgents));
		
		cartago.storeCurrentRound(_numberOfAgents);
		cartago.createNewRoundScoreRecorder(_numberOfAgents, _numberOfRounds);
		cartago.newRound();
	}
	
	rule $cartago.signal(string id, endTournament()) {
		console.println("Tournament is over.");
		cartago.printTournament();
	}
}
