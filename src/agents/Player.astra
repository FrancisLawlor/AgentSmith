package agents;

agent Player {
	module Cartago cartago;
	module System S;
	module Console console;
	
	types player {
		formula result(int);
		formula playerAgentId(string);
		formula payoff(float);
		formula currentBid(int);
		formula numberOfAgents(int);
	}
	
	rule +!main(list args) {
		cartago.link();
		!connectToTournamentArtifact();
		!connectToScoreBoardArtifact();
	}
		
	rule +!connectToTournamentArtifact() {
		cartago.lookupArtifact("tournament", cartago.ArtifactId id);
		cartago.focus(id);
	}
	
	rule +!connectToScoreBoardArtifact() {
		cartago.lookupArtifact("score_board", cartago.ArtifactId scoreBoardId);
		cartago.focus(scoreBoardId);
	}
	
	rule @message(request, string id, playerAgentId(string agentId)) {
		cartago.getNumberOfOptions(agentId);
	}
	
	rule $cartago.signal(string id, numberOfOptions(string agentId, int amountOfOptions)) {
		if (agentId == S.name()) {
			cartago.getGuess(S.name(), amountOfOptions);
		}
	}
	
	rule $cartago.signal(string id, generatedGuess(string agentId, int guess, int numberOfAgents)) {
		if (agentId == S.name()) {
			+numberOfAgents(numberOfAgents);
			cartago.recordBid(agentId, guess, numberOfAgents);
		}
	}
	
	rule $cartago.signal(string id, bidReceived(string agentId, int currentBid)) {
		if (agentId == S.name()) {
			cartago.playGame(S.name(), currentBid);
		}
	}
	
	rule $cartago.signal(string id, gameFinished(string agentId, float payoff)) {
		if (agentId == S.name()) {
			query(numberOfAgents(int _numberOfAgents));
			cartago.recordPayoff(agentId, payoff, _numberOfAgents);
		}
	}
	
	rule $cartago.signal(string id, allPayoffsRecorded()) {
		cartago.receivedPayoff();
	}	
	
	rule $cartago.signal(string id, sendUpdateKeyValuePair(string updateDataKey, int updateDataValue)) {
		cartago.updateStrategy(S.name(), updateDataKey, updateDataValue);
	}
	
	rule $cartago.signal(string id, updateReceived(string agentId)) {
		if (agentId == S.name()) {
			send (request, "game_master", playerAgentId("game_master"));
		}
	}
}