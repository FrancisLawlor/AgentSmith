package agents;

agent Player {
	module Cartago cartago;
	module System S;
	module Console console;
	
	types player {
		formula result(int);
		formula playerAgentId(string);
		formula payoff(float);
	}
	
	rule +!main(list args) {
		cartago.link();
		!connectToTournamentArtifact();
		!connectToScoreBoardArtifact();
	}
		
	rule +!connectToTournamentArtifact() {
		cartago.lookupArtifact("tournament", cartago.ArtifactId id);
		cartago.focus(id);
	}
	
	rule +!connectToScoreBoardArtifact() {
		cartago.lookupArtifact("score_board", cartago.ArtifactId scoreBoardId);
		cartago.focus(scoreBoardId);
	}
	
	rule @message(request, string id, playerAgentId(string agentId)) {
//		console.println("Request sent to agent with id " + agentId + ".");
		cartago.getNumberOfOptions(agentId);
	}
	
	rule $cartago.signal(string id, numberOfOptions(string agentId, int amountOfOptions)) {
		if (agentId == S.name()) {
//			console.println("Agent with id " + agentId + " has received the amount of options which is " + amountOfOptions + ".");
			cartago.getGuess(S.name(), amountOfOptions);
		}
	}
	
	rule $cartago.signal(string id, generatedGuess(string agentId, int guess)) {
		if (agentId == S.name()) {
			console.println(agentId + "\'s generated guess: " + guess);
			cartago.playGame(agentId, guess);
			cartago.recordBid(agentId, guess);
		}
	}
	
	rule $cartago.signal(string id, gameFinished(string agentId, float payoff)) {
		if (agentId == S.name()) {
//			console.println("Agent with id " + agentId + "\'s' payoff: " + payoff);
			cartago.receivedPayoff();
			cartago.recordPayoff(agentId, payoff);
		}
	}
	
	rule $cartago.signal(string id, sendUpdateKeyValuePair(string updateDataKey, int updateDataValue)) {
//		console.println("Received <" + updateDataKey + ", " + updateDataValue + ">");
		cartago.updateStrategy(S.name(), updateDataKey, updateDataValue);
	}
	
	rule $cartago.signal(string id, updateReceived(string agentId)) {
		if (agentId == S.name()) {
//			console.println("Strategy update by " + agentId + " has been received.");
			send (request, "game_master", playerAgentId("game_master"));
		}
	}
}