package agents.astra;

agent TournamentConfigurator {
    module Cartago cartago;
    module Console console;
    module System S;
    
    types tournament {
    		formula round(int);
    }
	
	rule +!main(list args) { 
        cartago.startService(); 
        cartago.link();

        !setupTool(cartago.ArtifactId tournament);        
        
        cartago.lookupArtifact("tournament", cartago.ArtifactId id);
		cartago.focus(id);
        
        cartago.operation(id, configureTournament("configuration/config.json"));
        cartago.getNumberOfRounds();
        cartago.createAgents();
    } 

    rule +!setupTool(cartago.ArtifactId C) {  
         cartago.makeArtifact("tournament", "tournament.core.TournamentConfigurator", cartago.params([]), C);
         console.println("Tournament Created");
    }  
        
    rule $cartago.signal(string id, numberOfRounds(int rounds)) {
		console.println("number of rounds: " + rounds);
	}
	
	rule $cartago.signal(string id, createAgent(string agentId, string agentStrategy)) {
		S.createAgent(agentId, "agents.astra.Player");
		S.setMainGoal(agentId, [agentStrategy]);
		console.println("created agent: " + agentId);
	}
}
